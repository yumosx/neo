#--------------------declare or define---------
let a = 2;
a = 1;

let arr = [1, 2, 3, 4];
let [a, b, c, d] = arr;
let ${a: b, c : d} = {a : 1, c : 2};

#------------------statement-----------------
if () {
    
} else {
    
}

cond
    (boolean expr) => {}
    (boolean expr) => {}
    (boolean expr) => {}

#----------------------function--------------
fn add(a : int, b : int) int {
    if (a > 0) {
        result a + b;
    } else {
        result b - a;
    }
}

#-----------------------record---------------

type A record {
    name : string;
    age  : int;
}

let a = A{name: 1, age : 2}

fn get(a : A) string {
    result A.name;
}

A.get();

type A record {
     a, b, 
     c, d, 
     e, f, 
     g : string
}

#----------------------interface---------------
type Person interface {
    Animal
    play()
}

type Animal interface {
    eat()
    drink()
}

type Alan record :: Person {
    
}

#----------------------union type--------------
type strInt string | int

fn max(s : strInt) strInt.(type) {
    result s
}

#----------------------generics----------------
fn max[T any](a : Int, b : T) T {

}

type error interface {
    error() string
}
